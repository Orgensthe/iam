// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RVUW/bNhD+K8RtwIBCtdz0TW9pkwUGtqxYk710QcCJJ4uNRHLkqa4R6L8PPFq1E0lG",
	"gHVr+mSaR3787rvvTvdQ2tZZg4YCFPcQyhpbyctz762PC+etQ08aebu0CuNvZX0rCQrQhl6fQAa0dZj+",
	"4ho99Bm0GIJc8+ldMJDXZg19n4HHvzvtUUHxIWHuz998AbN/fcSSItaVvUMzZiPLEkO4pSGqMJReO9LW",
	"QAGnHBV8V1TWiy6g31Md2GSAn532GG5jQo9BzjkmSLc4maXHymOo/9XdGf6/p/BBAilfkc5PJMKB27T9",
	"GO1q61DYShxqthiD9BPqX0fdRuJjK3UzkXTcPiq3VuNb19ers6OXjC7vLmU7kdilLu+MbDm5udtOhrCx",
	"fuLhd7vIkccf2TXlfYA5Nmy8ok1lU8cYkiW7wzB/eGsVhq6NvB5yiYH3XSu0bEVA/0mXyLSi/uK0oxoN",
	"6VLy6QwaXaIJeAB86mRZozhZLCGDzjdQQE3kQpHnm81mITm8sH6d7+6G/JfV2/PL9+cvTxbLRU1twy7S",
	"1OBDOpDBJ/Qh0Xy1WC6W8aB1aKTTUMBr3oqaUM3myNlfvHQ20JS5qfMmWfnPmE60Fqe2UvFtj5Lwamf0",
	"KD8GemPVdpAUDYNK55qdJPnHYM1+isXVjx4rKOCHfD/m8t2My9nUXKmHxH7jhWzEwbbQRrz4Vfo7ZTfm",
	"BRz6gXyHbJDgbFQ0PnuyfPXVaCYJJnimqZB0UslLlewa+movpy/AxMudwc8OS0IlcDjTZ0PJ83ut+oi9",
	"xomy/4FeV1t29E9htvoXSEPpnfSyRUIfoPhwDzqC1CgVN+rgex5pL4exuE9v1MgzALtJ+zSER4Mr9ubq",
	"DLKEHBtgj6vVyCvHwG8e+Mh0TcO6xql0pJOSBVjSCSnf2UDXDPC9ttGE3s/J9VydL6ZX2CBNfKTOeH+u",
	"SCkag2+2KzV2/f9luaj5ckbzxPGba54ByXVUBZKrb/psetJcIM3JfYE0r/VTJszT9c2+QfH+077+WRsl",
	"UvC5GaHv+38CAAD//zGkXyzRDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
